#!/usr/bin/python
#
# Install the katello packages from an ISO. This assumes that the
# script exists in a directory which is a valid repo. It should have
# a Packages and repository subdirectorties
#
# After this command is run, the user will need to run the
# the katello-installer script in order to set up the installation.
#
# Copyright 2013-2014 Red Hat, Inc.
#
#
import os
import shutil
import subprocess
import sys
import tempfile

from optparse import OptionParser

# Runs a command, and exits if the command is not successful.
# The output is returned.
def run_command(cmd):
    stdout = ""
    try:
        with (tempfile.TemporaryFile()) as stdout_file:
            subprocess.check_call(cmd, stdout=stdout_file)
            stdout_file.seek(0)
            stdout = stdout_file.read()
    except (OSError, subprocess.CalledProcessError), e:
        sys.stderr.write("Error while executing command: '%s'\n" % (" ".join(cmd)))
        sys.exit(-1)

    return stdout

# Ensure we are root
if os.getuid() != 0:
    sys.stderr.write('Error: this command requires root access to execute\n')
    sys.exit(8)

parser = OptionParser(description="This script will install the katello packages on the current machine")
parser.add_option("--enhanced_reporting", action="store_true", 
    help="If specified the enhanced reporting feature will be installed", default=False)
parser.add_option("--nogpgsigs", action="store_true", 
    help="If specified, package GPG signatures will be ignored when installing" , default=False)
(opts, args) = parser.parse_args()

# Figure out where we are running
INSTALL_FILE = os.path.abspath(__file__)
PWD = os.path.dirname(INSTALL_FILE)
GPG_FILE="/etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release"
REPO_FILE = "/etc/yum.repos.d/katello-local.repo"
DEST_DIR = "/opt/satellite/"

ISO_PACKAGE_DIR = os.path.join(PWD, "Packages")
ISO_REPODATA_DIR = os.path.join(PWD, "repodata")
DEST_PACKAGE_DIR = os.path.join(DEST_DIR, "Packages")
DEST_REPODATA_DIR = os.path.join(DEST_DIR, "repodata")

INDENT = "   - "


print "This script will install the katello packages on the current machine."
print INDENT + "Ensuring we are in an expected directory."
# Try to make sure we are in a sane directory
if (not os.path.exists(ISO_PACKAGE_DIR)):
    sys.stderr.write('Error: There is no Packages Directory\n')
    sys.exit(-1)

if (not os.path.exists(ISO_REPODATA_DIR)):
    sys.stderr.write('Error: There is no repodata Directory\n')
    sys.exit(-1)

if (not os.path.exists(DEST_DIR)):
    os.makedirs(DEST_DIR)

if (os.path.exists(DEST_PACKAGE_DIR)):
    shutil.rmtree(DEST_PACKAGE_DIR)

if (os.path.exists(DEST_REPODATA_DIR)):
    shutil.rmtree(DEST_REPODATA_DIR)

print INDENT + "Copying installation files."
shutil.copytree(ISO_PACKAGE_DIR, DEST_PACKAGE_DIR)
shutil.copytree(ISO_REPODATA_DIR, DEST_REPODATA_DIR)


# Create a yum repository pointing to the current directory
# making sure to disable gpgcheck if packages are not signed

GPG_CHECK = 0 if opts.nogpgsigs else 1

print INDENT + "Creating a Repository File"
repo_file = open(REPO_FILE, 'w')
repo_file.write("""#
# Repository for the locally mounted katello repo
#
[katello-local]
name=katello-local
baseurl=file://%s
enabled=1
gpgcheck=%s""" % (DEST_DIR, GPG_CHECK))
repo_file.close()

# Determine if we need to do install or update

upgrade = False

print INDENT + "Checking to see if Katello is already installed."
if (run_command(["rpm", "-qa", "katello"])):
    upgrade = True

if upgrade:
    print INDENT + "Katello is already installed, running 'yum upgrade'."
    upgrade_cmd = ["yum", "upgrade", "-y"]
    if opts.nogpgsigs:
        print INDENT + "WARNING: Package GPG signatures will be ignored!"
        upgrade_cmd.extend(["--nogpgcheck"])
    output = run_command(upgrade_cmd)

else:
    # Import the gpg keys
    if (os.path.exists(GPG_FILE)):
        print INDENT + "Importing the gpg key."
        run_command(["rpm", "--import", GPG_FILE])

    # Determine if we need to install katello or Katello-headpin-all
    katello_all = False
    for f in os.listdir(ISO_PACKAGE_DIR):
        if f.startswith('foreman'):
            katello_all = True
            break
    cmd = ["yum", "install", "-y"]
    if opts.nogpgsigs:
        print INDENT + "WARNING: Package GPG signatures will be ignored!"
        cmd.extend(["--nogpgcheck"])
    if (katello_all):
        print INDENT + "katello is not yet installed, installing it."
        cmd.extend(["katello"])
    else:
        print INDENT + "katello-headpin-all is not yet installed, installing it."
        cmd.extend(["katello-headpin-all"])
    if opts.enhanced_reporting:
        print INDENT + "Enhanced reporting packages will be installed"
        cmd.extend(["splice", "ruby193-rubygem-splice_reports", "spacewalk-splice-tool"])
    run_command(cmd)

# Remove the repository file
print INDENT + "Installation repository will remain configured for future package installs."
print INDENT + "Installation media can now be safely unmounted."
print


# fini
if (upgrade):
    print "Upgrade is complete. Please backup your data and run katello-installer."
else:
    print "Install is complete. Please run katello-installer."


