#!/bin/bash
#
# Start/stop script for katello stack (Pulp/Candlepin/Foreman...)
#
# Usage:
#
# katello-stack start|stop|restart|status
#  Working with all Katello services
#
# katello-stack update|update-disabled
#  Updates RPMs using yum (disabled = use --enablerepo option) and
#  stores database snapshots for later initialization
#
# katello-stack on|off
#  Controls services autostart (using chkconfig)
#
# katello-stack initdb
#  Initializes all backend engine databases from snapshots (faster than
#  full redeployment)
#
# Run as root.
#
# Typical use (from src/ directory):
#
# sudo ../scripts/test/katello-stack initdb && rake setup --trace &&
#  ../scripts/test/katello-cli-simple-test.sh
#

SERVICES_START=(mongod pulp-server postgresql tomcat6)
SERVICES_STOP=(tomcat6 pulp-server mongod postgresql)

print_usage()
{
  echo "Usage: `basename $0` start|restart|stop|status|on|off|update|update-disabled|initdb" && exit 1
}

post_update()
{
  pulp-migrate
  # we dont store snapshot for mongodb - its fast enough
  /usr/share/candlepin/cpsetup
  su - postgres -c \
    'pg_dump -c candlepin > /var/lib/pgsql/backups/candlepin_clean.sql'
}

update_system()
{
  yum update pulp candlepin-tomcat6
  post_update
}

update_disabled()
{
  yum --enablerepo=fedora-pulp --enablerepo=fedora-candlepin \
    update pulp candlepin-tomcat6
  post_update
}

initdb()
{
  # clean pulp
  echo 'db.dropDatabase();' | mongo pulp_database
  pulp-migrate

  # clean candlepin from snapshot
  su - postgres -c \
    'psql candlepin < /var/lib/pgsql/backups/candlepin_clean.sql'
  service pulp-server restart
  service tomcat6 restart
}

EXPECTED_ARGS=1
if [ $# -lt $EXPECTED_ARGS ]; then
  print_usage
fi

case "$1" in
  start|status)
    for SERVICE in ${SERVICES_START[*]}; do
      service $SERVICE $1
    done
    ;;
  stop)
    for SERVICE in ${SERVICES_STOP[*]}; do
      service $SERVICE $1
    done
    ;;
  repair)
    service mongod stop
    rm /var/lib/mongodb/mongod.lock
    sudo -u mongodb mongod -f /etc/mongodb.conf --repair
    ;;
  restart)
    for SERVICE in ${SERVICES_STOP[*]}; do
      service $SERVICE stop
    done
    echo
    for SERVICE in ${SERVICES_START[*]}; do
      service $SERVICE start
    done
    ;;
  on|off)
    for SERVICE in ${SERVICES_START[*]}; do
      chkconfig $SERVICE $1
    done
    ;;
  update)
    update_system
    ;;
  update-disabled)
    update_disabled
    ;;
  initdb)
    initdb
    ;;
  *)
    print_usage
    ;;
esac

exit 0

# :vim:sw=2:ts=2:et:
